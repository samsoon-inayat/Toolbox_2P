function out = get_continuous_variables(data_an,air,conf,ctrl)
ts = data_an.ts;ds = data_an.ds;sp = data_an.speed;tm = data_an.animal_motion; bindur = data_an.bindur; bindist = data_an.bindist;
ac = diff(sp)./diff(ts); ac = [0 ac];
cmdTxt = sprintf('csel = data_an.air & data_an.%s;',conf); eval(cmdTxt);
if strcmp(air)
air_trials = data_an.air_trials_on;

atts = []; atds = []; atsp = []; attm = []; aFR = []; atac = [];otts = []; attn = [];atbn = []; atbdur = []; atbdist = [];
% figure(100);clf;plot(ts,csel);pause(0.05);
% air = 0;
for ii = 1:length(redges)
    % trial = sevent(ii):eevent(ii);
    trials = (air_trials == ii) & csel;
    trial = find(trials);
    tts = ts(trial)-ts(trial(1)); tds = ds(trial)-ds(trial(1)); tsp = sp(trial); ttm = tm(trial); tac = ac(trial); tbdur = bindur(trial); tbdist = bindist(trial);
    FR = data_an.firing_rate(:,trial);
    atts = [atts tts]; atds = [atds tds]; atsp = [atsp tsp]; attm = [attm ttm]; aFR = [aFR FR]; atac = [atac tac];
    otts = [otts ts(trial)];
    attn = [attn ones(size(trial))*ii]; atbn = [atbn 1:length(trial)];
    atbdur = [atbdur tbdur]; atbdist = [atbdist tbdist];
end


% Creating the model for firing rate as a function of speed, distance, time, and motion
% X = [atts', atsp', atds'];%, atac', attm'];    % Predictor matrix (continuous variables)
out.time = atts';
out.dist = atds';
out.speed = atsp';
out.FR = aFR';
out.trialnum = attn';
out.binnum = atbn';
out.bindur = atbdur;
out.bindist = atbdist;
[out.trial_metrics_code,out.trial_metrics] = get_trial_metrics(out);


function [trial_metrics_code,trial_metrics] = get_trial_metrics(out)
% Define functions for different variance metrics
mean_fun = @(x) mean(x);
std_fun = @(x) std(x, 0);  % Standard deviation (unbiased)
cv_fun = @(x) std(x, 0) ./ mean(x);  % Coefficient of Variation (CV)
skew_fun = @(x) skewness(x);  % Skewness
kurt_fun = @(x) kurtosis(x);  % Kurtosis
max_fun = @(x) max(x); 
latency_fun = @(x, t) t(find(x > 0, 1, 'first'));  
rlatency_fun = @(x, t) t(find(x > 0, 1, 'last'));  

trial_nums = out.trialnum; speed = out.speed; time = out.time; distance = out.dist; bindur = out.bindur; bindist = out.bindist;
% Compute standard deviation, CV, skewness, and kurtosis for each trial
trial_mean = accumarray(trial_nums, speed, [], mean_fun); 
trial_std = accumarray(trial_nums, speed, [], std_fun); 
trial_cv = accumarray(trial_nums, speed, [], cv_fun);
trial_skew = accumarray(trial_nums, speed, [], skew_fun);
trial_kurt = accumarray(trial_nums, speed, [], kurt_fun);
% Compute total time and total distance for each trial
last_bin_time = accumarray(trial_nums, time, [], max_fun);
total_time = accumarray(trial_nums, bindur, [], @sum);
total_distance = accumarray(trial_nums, bindist, [], @sum);
last_bin_distance = accumarray(trial_nums, distance, [], max_fun);
% Compute movement latency for each trial
movement_latency = accumarray(trial_nums, speed, [], @(x) latency_fun(x, time));
rest_latency = accumarray(trial_nums, speed, [], @(x) latency_fun(x, time));

trial_metrics_code = {'time','distance','movement_latency','rest_latency','mean_speed','std_speed','cov_speed','ske_speed','kurt_speed'};
trial_metrics = [total_time,total_distance,rest_latency,movement_latency,trial_mean,trial_std,trial_cv,trial_skew,trial_kurt];