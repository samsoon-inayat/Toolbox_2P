function plot_Vars_wrt_centers_AD

protocol_C = '10_C';
protocol_A = '10_A';
ei_C = evalin('base','ei10_C');
ei_A = evalin('base','ei10_A');
mData = evalin('base','mData'); colors = mData.colors; sigColor = mData.sigColor; axes_font_size = mData.axes_font_size;
ET_C = evalin('base',sprintf('ET10_CD'));
ET_A = evalin('base',sprintf('ET10_CC'));
selAnimals_C = 1:length(ei_C)
selAnimals_A = 1:length(ei_A)

% in the following variable all the measurements are in the matrices form
% for each variable colums indicate raster and stim marker types specified 
% the rows indicate condition numbers.
paramMs_C = parameter_matrices_ctrl('get','10_CD_Ctrl');
paramMs_A = parameter_matrices_ctrl('get','10_CC_Ctrl');
paramMs_C.belt_lengths = get_mean_belt_length(ei_C,protocol_C)
paramMs_A.belt_lengths = get_mean_belt_length(ei_A,protocol_A)
% after getting all matrics, we can apply selection criteria to select a
% subgroup of cells
% here is the selection criteria in make_selC_structure function
all_variables = {'all_zMIs','all_fFR','all_fwidths','all_frs',''};
ylabels = {'zMIs','Firing Rate','Field Width','RS',{'Percentage of','spatially tuned cells'}};
y_spacings = [10,2,20,0.7,10];
svn = 3; %gcn = 3
if svn == 5
    selected_variable = all_variables{1};
    selected_variable_f = 'Percent_PCs';
    number_of_bins = 2;
else
    selected_variable = all_variables{svn};
    selected_variable_f = selected_variable;
    number_of_bins = 5;
end
cellsOrNot = 1; planeNumber = NaN; zMI_Th = 1.96; fwids = [1 150]; fcens = [0 150]; rs_th = 0.3; FR = NaN;%[0.1 5000];
% cellsOrNot = 1; planeNumber = NaN; zMI_Th = NaN; fwids = NaN; fcens = NaN; rs_th = NaN; FR = [0.1 5000];
conditionsAndRasterTypes = [11 21 31 41];
conditionsAndRasterTypes = [11];
selC = make_selC_struct(cellsOrNot,planeNumber,conditionsAndRasterTypes,zMI_Th,fwids,fcens,rs_th,NaN,NaN,FR);
[cpMs_C,pMs_C] = parameter_matrices_ctrl('select','10_C',{paramMs_C,selC});
[cpMs_A,pMs_A] = parameter_matrices_ctrl('select','10_A',{paramMs_A,selC});
perc_cells_C = parameter_matrices_ctrl('print','10_C',{cpMs_C,pMs_C,ET_C,selAnimals_C});
perc_cells_A = parameter_matrices_ctrl('print','10_A',{cpMs_A,pMs_A,ET_A,selAnimals_A});

out_C = get_values(paramMs_C,pMs_C,selAnimals_C,selected_variable,conditionsAndRasterTypes,number_of_bins);
out_A = get_values(paramMs_A,pMs_A,selAnimals_A,selected_variable,conditionsAndRasterTypes,number_of_bins);

all_conds = unique(out_C.all_conds); all_rts = unique(out_C.all_rts);
var_oi_A = squeeze(out_A.sV);
var_oi_C = squeeze(out_C.sV);
dist_oi_A = squeeze(out_A.a_sV);
dist_oi_C = squeeze(out_C.a_sV);
varNames = out_C.varNames;
n = 0;
%% average distributions w.r.t centers for the two groups
runthis = 1;
if runthis
%     cN = 1;
    data_C = [];
    data_A = [];
    ind = 1;
    for gcni = 1:length(conditionsAndRasterTypes)
        if svn == 5
            tempC = squeeze(out_C.all_data_N(gcni,:,:))';
            tempA = squeeze(out_A.all_data_N(gcni,:,:))';
            if size(tempC,1) == 1
                tempC = tempC'; tempA = tempA';
            end
            sum_C = sum(tempC,2);
            sum_A = sum(tempA,2);
            for ii = 1:size(tempC,1)
                tempC(ii,:) = 100*tempC(ii,:)/sum_C(ii);
            end
            for ii = 1:size(tempA,1)
                tempA(ii,:) = 100*tempA(ii,:)/sum_A(ii);
            end
        else
            tempC = squeeze(out_C.all_data(gcni,:,:))';
            tempA = squeeze(out_A.all_data(gcni,:,:))';
            if size(tempC,1) == 1
                tempC = tempC'; tempA = tempA';
            end
        end
        
        data_C = [data_C tempC];
        data_A = [data_A tempA];
        if size(tempC,2) > 1
            for ii = 1:size(tempC,2)
                varNames{ind} = sprintf('C%dB%d',gcni,ii);
                xticklabels{ind} = sprintf('C%d-b%d',gcni,ii);
                temp_tcolors{ind} = colors{gcni};
                ind = ind + 1;
            end
        else
            varNames{ind} = sprintf('C%d',gcni); xticklabels{ind} = varNames{ind};
            temp_tcolors{ind} = colors{gcni};ind = ind + 1;
        end
    end
    data_CT = [ones(size(data_C,1),1) data_C];
    data_AT = [2*ones(size(data_A,1),1) data_A];
    
    dataT = array2table([data_CT;data_AT]);
    dataT.Properties.VariableNames = {'Group',varNames{:}};
    numCols = size(tempC,2);
    dataT.Group = categorical(int32(dataT.Group))
    colVar1 = []; colVar2 = [];
    for cniis = 1:length(conditionsAndRasterTypes)
        colVar1 = [colVar1 cniis*ones(1,numCols)];
        colVar2 = [colVar2 1:numCols];
%         colVar1 = [ones(1,numCols) 2*ones(1,numCols) 3*ones(1,numCols) 4*ones(1,numCols)];    colVar2 = [1:numCols 1:numCols 1:numCols 1:numCols];
    end
    if number_of_bins == 1
        within = table(colVar1');
        within.Properties.VariableNames = {'Condition'};
        within.Condition = categorical(within.Condition);
    else
        if length(conditionsAndRasterTypes) == 1
        within = table(colVar1',colVar2');
        within.Properties.VariableNames = {'Condition','Bin'};
        within.Condition = categorical(within.Condition);
        within.Bin = categorical(within.Bin);
    end
    ra = repeatedMeasuresAnova(dataT,within);
%     mVarT = ra.est_marginal_means.Mean(1:16); mVarT_A = ra.est_marginal_means.Mean(17:32); 
%     semVarT = ra.est_marginal_means.Formula_StdErr(1:16); semVarT_A = ra.est_marginal_means.Formula_StdErr(17:32); 
%     mVar = NaN(1,2*(length(mVarT)));
%     semVar = mVar; TL = 2*length(mVarT);
%     tcolors = num2cell(mVar);
%     mVar(1:2:TL) = mVarT;semVar(1:2:TL) = semVarT;
%     mVar(2:2:TL) = mVarT_A;semVar(2:2:TL) = semVarT_A;
    tcolors = [temp_tcolors temp_tcolors];
    mVar = ra.est_marginal_means.Mean;
    semVar = ra.est_marginal_means.Formula_StdErr;
    combs = ra.mcs.combs; p = ra.mcs.p; h = ra.mcs.p<0.05;

    nConds = length(conditionsAndRasterTypes);
    xdata = [1:(number_of_bins*nConds) ((number_of_bins*nConds)+2):(((number_of_bins*nConds)+2)+(number_of_bins*nConds)-1)]; 
    colors = mData.colors;
%     hf = figure(5);clf;set(gcf,'Units','Inches');set(gcf,'Position',[5 7 6.9 2],'color','w');
    hf = figure(6);clf;set(gcf,'Units','Inches');set(gcf,'Position',[5 7 3.5 1.5],'color','w');
    hold on;
    ind = 1
    maxY = 10;
    [hbs,maxY] = plotBarsWithSigLines(mVar,semVar,combs,[h p],'colors',tcolors,'sigColor','k',...
        'maxY',maxY,'ySpacing',y_spacings(svn),'sigTestName','','sigLineWidth',0.25,'BaseValue',0.1,...
        'xdata',xdata,'sigFontSize',7,'sigAsteriskFontSize',10,'barWidth',0.7,'sigLinesStartYFactor',0);
    for ii = ((number_of_bins*4)+1):length(hbs)
        set(hbs(ii),'facecolor','none','edgecolor',tcolors{ii});
    end
    % plot([0.5 11],[-0.5 0.5],'linewidth',1.5)
    set(gca,'xlim',[0.25 xdata(end)+0.75],'ylim',[0 maxY+1],'FontSize',6,'FontWeight','Bold','TickDir','out');
    xticks = xdata; 
    
    set(gca,'xtick',xticks,'xticklabels',xticklabels);
    xtickangle(30)
    changePosition(gca,[0 0.03 0.08 0]);
    put_axes_labels(gca,{[],[0 0 0]},{ylabels{svn},[0 0 0]});
    if svn == 5
        save_pdf(hf,mData.pdf_folder,sprintf('%s_distributions_PercentPCs_centers',mfilename),600);
    else
        save_pdf(hf,mData.pdf_folder,sprintf('%s_distributions_%s_centers',mfilename,selected_variable_f),600);
    end
return;
end


function out = get_values(paramMs_C,pMs_C,selAnimals_C,selected_variable,conditionsAndRasterTypes,number_of_bins)
all_conds = []; all_rts = []; gAllVals_C = [];
for rr = 1:size(pMs_C,1)
    for cc = 1:size(pMs_C,2)
        tcond = conditionsAndRasterTypes(rr,cc);
        nds = dec2base(tcond,10) - '0';
        varNames{rr,cc} = sprintf('C%dR%d',nds(1),nds(2));
        all_conds = [all_conds nds(1)]; all_rts = [all_rts nds(2)];
        xticklabels{cc,rr} = sprintf('%s-%s',paramMs_C.stimMarkers{nds(2)},paramMs_C.rasterTypes{nds(2)}(1));
        for an = 1:length(selAnimals_C)
            f_centers_C{an,rr,cc} = squeeze(pMs_C{rr,cc}.all_fcenters{selAnimals_C(an)}(nds(1),nds(2),:));
            cmdTxt = sprintf('sV_C(an,rr,cc) = nanmean(squeeze(pMs_C{rr,cc}.%s{selAnimals_C(an)}(nds(1),nds(2),:)));',selected_variable);
            eval(cmdTxt)
            cmdTxt = sprintf('a_sV_C{an,rr,cc} = squeeze(pMs_C{rr,cc}.%s{selAnimals_C(an)}(nds(1),nds(2),:));',selected_variable);
            eval(cmdTxt)
            gAllVals_C = [gAllVals_C;a_sV_C{an,rr,cc}];
        end
    end
end

% bins = 0:number_of_bins:155;
for an = 1:length(selAnimals_C)
    for cc = 1:length(conditionsAndRasterTypes)
        theseCenters = f_centers_C{an,1,cc};
        these_sV_Vals = a_sV_C{an,1,cc};
        if number_of_bins == 1
            all_data_C(cc,:,an) = nanmean(these_sV_Vals);
            all_data_N(cc,:,an) = length(these_sV_Vals);
        else
            mbl = paramMs_C.belt_lengths{an}(cc)+1;
            binSize = mbl/number_of_bins;
            bins = 0:binSize:mbl;
            [N,E,Bi] = histcounts(theseCenters,bins);
            mean_sv_Vals = [];
            for bb = 1:length(N)
                mean_sv_Vals(bb) = nanmean(these_sV_Vals(Bi == bb));
    %             mean_sv_Vals(bb) = nanmedian(these_sV_Vals(Bi == bb));
            end
    %         mean_sv_Vals(isnan(mean_sv_Vals)) = 0;
            all_data_C(cc,:,an) = mean_sv_Vals;
            all_data_N(cc,:,an) = N;
        end
    end
end
out.varNames = varNames;
out.all_conds = all_conds;
out.all_rts = all_rts;
out.gAllVals = gAllVals_C;
out.sV = sV_C;
out.a_sV = a_sV_C;
out.all_data = all_data_C;
out.all_data_N = all_data_N;
